{"version":3,"sources":["App2.module.css","bottom.module.css","serviceWorker.ts","bottom.tsx","total.tsx","App2.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Bottoms","props","className","s","bottoms","onClick","title","Total","totlnumbers","counter","App2","useState","startNumber","setStartNumber","maxNum","setMaxnum","alert","total","click","one","window1","total1","click1","one1","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,OAAS,qBAAqB,MAAQ,oBAAoB,MAAQ,oBAAoB,IAAM,kBAAkB,QAAU,sBAAsB,OAAS,qBAAqB,OAAS,qBAAqB,KAAO,qB,mBCA7PD,EAAOC,QAAU,CAAC,QAAU,0B,uJCWRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2CCDSC,MATf,SAAiBC,GACb,OAEQ,yBAAKC,UAAWC,IAAEC,QAASC,QAASJ,EAAMI,SAAUJ,EAAMK,Q,MCQvDC,MAZf,SAAeN,GAEX,IAAIO,EAAaP,EAAMQ,QAEvB,OAEI,6BAAMD,ICsECE,MA5Ef,WAAiB,IAAD,EAE0BC,mBAAiB,GAF3C,mBAELC,EAFK,KAEQC,EAFR,OAGgBF,mBAAS,GAHzB,mBAGLG,EAHK,KAGGC,EAHH,KA6BZ,OAzBIH,EAAcE,GACdE,MAAM,SAyBN,yBAAKd,UAAWC,IAAEO,MACd,yBAAKR,UAAWC,IAAEP,QACd,yBAAKM,UAAWC,IAAEc,OAAO,kBAAC,EAAD,CAAOR,QAASG,KAEzC,yBAAKV,UAAWC,IAAEe,OACd,yBAAKhB,UAAWC,IAAEgB,KAAK,kBAAC,EAAD,CAASb,MAAM,QAAQD,QAjB9D,WACI,GAAIO,EAAcE,EACd,OAAOD,EAAeD,EAAc,OAgBxB,yBAAKV,UAAWC,IAAEgB,KAAlB,IAAwB,kBAAC,EAAD,CAASb,MAAM,OAAOD,QAZlE,WACI,OAAOQ,EAAe,SAuBlB,yBAAKX,UAAWC,IAAEiB,SACd,yBAAKlB,UAAWC,IAAEkB,QAAQ,kBAAC,EAAD,CAAOZ,QAASK,KAE1C,yBAAKZ,UAAWC,IAAEmB,QACd,yBAAKpB,UAAWC,IAAEoB,MAAM,kBAAC,EAAD,CAASlB,QA3CjD,WACI,OAAOU,EAAUD,EAAS,IA0CuCR,MAAM,SAC3D,yBAAKJ,UAAWC,IAAEoB,MAAlB,IAAyB,kBAAC,EAAD,CAASlB,QAxClD,WACI,OAAOU,EAAUD,EAAS,IAuCwCR,MAAM,WAGpE,gCCxDZkB,IAASC,OAAO,kBAAC,EAAD,MACXC,SAASC,eAAe,SJmIvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be5d9b98.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App2\":\"App2_App2__1QFri\",\"window\":\"App2_window__h6jAB\",\"total\":\"App2_total__1Q_0Q\",\"click\":\"App2_click__1C-Nk\",\"one\":\"App2_one__f3DMk\",\"window1\":\"App2_window1__393gJ\",\"total1\":\"App2_total1__34p13\",\"click1\":\"App2_click1__JDM-T\",\"one1\":\"App2_one1__2NYs7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bottoms\":\"bottom_bottoms__txnvI\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from \"./bottom.module.css\"\r\n\r\ntype BottomsType={\r\n    onClick: ()=>void\r\n    title: string\r\n}\r\n\r\nfunction Bottoms(props: BottomsType) {\r\n    return (\r\n\r\n            <div className={s.bottoms} onClick={props.onClick}>{props.title}</div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Bottoms;\r\n","import React from 'react';\r\nimport './chack.css';\r\n\r\ntype TotalT={\r\n    counter: number\r\n}\r\n\r\nfunction Total(props: TotalT) {\r\n\r\n    let totlnumbers= props.counter\r\n\r\n    return (\r\n\r\n        <div>{totlnumbers}</div>\r\n\r\n     \r\n    );\r\n}\r\n\r\nexport default Total;\r\n","import React, {useState} from 'react';\r\nimport s from'./App2.module.css';\r\nimport Chec from \"./chack\";\r\nimport Bottoms from \"./bottom\";\r\nimport Total from \"./total\";\r\n\r\n\r\nfunction App2() {\r\n\r\n    const [startNumber, setStartNumber] = useState<number>(0)\r\n    const [maxNum, setMaxnum] = useState(3)\r\n    if (startNumber > maxNum) {\r\n        alert(\"error\")\r\n    }\r\n\r\n\r\n    function maxNumber() {\r\n        return setMaxnum(maxNum + 1)\r\n    }\r\n\r\n    function minNumber() {\r\n        return setMaxnum(maxNum - 1)\r\n    }\r\n\r\n\r\n    function numPlusOne() {\r\n        if (startNumber < maxNum) {\r\n            return setStartNumber(startNumber + 1)\r\n        }\r\n    }\r\n\r\n    function resetNumber() {\r\n        return setStartNumber(0)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.App2}>\r\n            <div className={s.window}>\r\n                <div className={s.total}><Total counter={startNumber}/></div>\r\n\r\n                <div className={s.click}>\r\n                    <div className={s.one}><Bottoms title=\"start\" onClick={numPlusOne}/></div>\r\n                        <div className={s.one}> <Bottoms title=\"stop\" onClick={resetNumber}/></div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n{/*вторая часть */}\r\n\r\n\r\n\r\n            <div className={s.window1}>\r\n                <div className={s.total1}><Total counter={maxNum}/></div>\r\n\r\n                <div className={s.click1}>\r\n                    <div className={s.one1}><Bottoms onClick={maxNumber} title=\"max\"/></div>\r\n                    <div className={s.one1}> <Bottoms onClick={minNumber} title=\"min\"/></div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default App2;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App2 from \"./App2\";\r\n\r\nReactDOM.render(<App2\r\n/>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}